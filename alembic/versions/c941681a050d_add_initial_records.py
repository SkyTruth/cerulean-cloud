"""Add initial records

Revision ID: c941681a050d
Revises: 39277f6278f4
Create Date: 2022-07-06 12:49:46.037868

"""
from datetime import datetime

from sqlalchemy import orm

import cerulean_cloud.database_schema as database_schema
from alembic import op

# revision identifiers, used by Alembic.
revision = "c941681a050d"
down_revision = "39277f6278f4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """add initial rows"""
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    with session.begin():
        clses = [
            database_schema.Cls(
                short_name="BACKGROUND",
                long_name="Background",
            ),
            database_schema.Cls(
                short_name="ANTHRO",
                long_name="Anthropogenic",
            ),
            database_schema.Cls(
                short_name="NATURAL",
                long_name="Natural",
            ),
            database_schema.Cls(
                short_name="INFRA",
                long_name="Infrastructure",
                supercls=2,
            ),
            database_schema.Cls(
                short_name="VESSEL",
                long_name="Vessel",
                supercls=2,
            ),
            database_schema.Cls(
                short_name="OLD_VESSEL",
                long_name="Vessel, old",
                supercls=5,
            ),
            database_schema.Cls(
                short_name="REC_VESSEL",
                long_name="Vessel, recent",
                supercls=5,
            ),
            database_schema.Cls(
                short_name="COIN_VESSEL",
                long_name="Vessel, coincident",
                supercls=7,
            ),
        ]
        session.add_all(clses)

        models = [
            database_schema.Model(
                file_path="experiments/2023_06_26_09_34_18_4cls_rn34_pr512_px1024_720min_maskrcnn/scripting_cpu_model.pt",
                layers=["VV", "INFRA", "VESSEL"],
                cls_map={
                    0: "BACKGROUND",
                    1: "INFRA",
                    2: "NATURAL",
                    3: "VESSEL",
                },  # inference_idx maps to class table
                name="Dummy for testing",
                tile_width_m=20422,
                tile_width_px=512,
                epochs=500,
                thresholds={
                    "pixel_nms_thresh": 0.4,
                    "bbox_score_thresh": 0.2,
                    "poly_score_thresh": 0.2,
                    "pixel_score_thresh": 0.2,
                    "groundtruth_dice_thresh": 0.0,
                },
                backbone_size=34,
                pixel_f1=0.466,
                instance_f1=0.455,
            ),
            database_schema.Model(
                file_path="experiments/20_Jul_2022_00_14_15_icevision_maskrcnn/scripting_cpu_test_28_34_224_58.pt",
                layers=["VV", "INFRA", "VESSEL"],
                cls_map={
                    0: "BACKGROUND",
                    1: "INFRA",
                    2: "VESSEL",
                    3: "NATURAL",
                },  # inference_idx maps to class table
                name="OLD, Not working so well",
                tile_width_m=20422,
                tile_width_px=224,
                backbone_size=34,
            ),
        ]
        session.add_all(models)

        layers = [
            database_schema.Layer(
                short_name="VV",
                long_name="S1 VV",
                citation="Copernicus Sentinel data, processed by ESA, accessed via AWS Open Data Registry.",
                source_url="https://registry.opendata.aws/sentinel-1/",
            ),
            database_schema.Layer(
                short_name="INFRA",
                long_name="Infrastructure Distance",
                citation="Generated by SkyTruth, using GFW's Infrastructure Dataset (pre-release)",
                source_url="https://storage.googleapis.com/ceruleanml/aux_datasets/infra_locations_01_cogeo.tiff",
            ),
            database_schema.Layer(
                short_name="VESSEL",
                long_name="Vessel Density",
                citation="Global Maritime Traffic Density Service (GTMDS) retrieved from GlobalMaritimeTraffic.org, a service of MapLarge 2021",
                source_url="https://gmtds.maplarge.com/public/ext/GMTDS/Main",
                notes="Typically uses the previous month's density map. If unavailable will default to previous year.",
            ),
        ]
        session.add_all(layers)

        aoi_types = [
            database_schema.AoiType(
                table_name="aoi_eez",
                long_name="Exclusive Economic Zone",
                short_name="EEZ",
                source_url="https://www.marineregions.org/eez.php",
                citation="Flanders Marine Institute (2019). Maritime Boundaries Geodatabase, version 11. Available online at https://www.marineregions.org/. https://doi.org/10.14284/382.",
                update_time=datetime.now(),
            ),
            database_schema.AoiType(
                table_name="aoi_iho",
                long_name="IHO Sea Areas",
                short_name="IHO",
                source_url="https://www.marineregions.org/sources.php#iho",
                citation="Flanders Marine Institute (2018). IHO Sea Areas, version 3. Available online at https://www.marineregions.org/. https://doi.org/10.14284/323.",
                update_time=datetime.now(),
            ),
            database_schema.AoiType(
                table_name="aoi_mpa",
                long_name="Marine Protected Area",
                short_name="MPA",
                source_url="https://www.protectedplanet.net/en/thematic-areas/marine-protected-areas",
                citation="UNEP-WCMC and IUCN (2023), Protected Planet: The World Database on Protected Areas (WDPA) and World Database on Other Effective Area-based Conservation Measures (WD-OECM) [Online], July 2023, Cambridge, UK: UNEP-WCMC and IUCN. Available at: www.protectedplanet.net.",
                update_time=datetime.now(),
            ),
            database_schema.AoiType(
                table_name="aoi_user",
                long_name="User-generated",
                short_name="USER",
                update_time=datetime.now(),
            ),
        ]
        session.add_all(aoi_types)

        source_types = [
            database_schema.SourceType(
                table_name="source_vessel",
                long_name="Vessel Source",
                short_name="VESSEL",
                citation="AIS from GFW",
            ),
            database_schema.SourceType(
                table_name="source_infra",
                long_name="Infrastructure Source",
                short_name="INFRA",
                citation="SkyTruth",
            ),
        ]
        session.add_all(source_types)

        frequencies = [
            database_schema.Frequency(
                short_name="REALTIME",
                long_name="Near real-time alerts",
            ),
            database_schema.Frequency(
                short_name="DAILY",
                long_name="Daily digest",
            ),
            database_schema.Frequency(
                short_name="WEEKLY",
                long_name="Weekly digest",
            ),
            database_schema.Frequency(
                short_name="MONTHLY",
                long_name="Monthly digest",
            ),
        ]
        session.add_all(frequencies)


def downgrade() -> None:
    """drop initial rows"""
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    with session.begin():
        models = session.query(database_schema.Model).all()
        for model in models:
            session.delete(model)

        layers = (
            session.query(database_schema.Layer)
            .filter(database_schema.Layer.short_name.in_(["VV", "INFRA", "VESSEL"]))
            .all()
        )
        for layer in layers:
            session.delete(layer)

        aoi_types = (
            session.query(database_schema.AoiType)
            .filter(
                database_schema.AoiType.short_name.in_(["EEZ", "IHO", "MPA", "USER"])
            )
            .all()
        )
        for aoi_type in aoi_types:
            session.delete(aoi_type)

        source_types = (
            session.query(database_schema.SourceType)
            .filter(database_schema.SourceType.short_name.in_(["VESSEL", "INFRA"]))
            .all()
        )
        for source_type in source_types:
            session.delete(source_type)

        frequencies = (
            session.query(database_schema.Frequency)
            .filter(
                database_schema.Frequency.short_name.in_(
                    ["REALTIME", "DAILY", "WEEKLY", "MONTHLY"]
                )
            )
            .all()
        )
        for frequency in frequencies:
            session.delete(frequency)

        clses = (
            session.query(database_schema.Cls)
            .filter(
                database_schema.Cls.short_name.in_(
                    [
                        "BACKGROUND",
                        "ANTHRO",
                        "NATURAL",
                        "INFRA",
                        "VESSEL",
                        "OLD_VESSEL",
                        "REC_VESSEL",
                        "COIN_VESSEL",
                    ]
                )
            )
            .all()
        )
        for clas in clses:
            session.delete(clas)
